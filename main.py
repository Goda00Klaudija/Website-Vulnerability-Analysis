import pandas as pd
from matplotlib import pyplot as plt
from sklearn import mixture
from sklearn.manifold import TSNE, MDS
from sklearn.metrics import silhouette_score, calinski_harabasz_score
from sklearn.mixture import GaussianMixture
from sklearn.preprocessing import MinMaxScaler
from sklearn.cluster import DBSCAN, KMeans
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Load the Data
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df1 = pd.read_excel(r'C:\Users\Goda\Desktop\Zap-Review.xlsx')
df2 = pd.read_excel(r'C:\Users\Goda\Desktop\N-Stalker-Review.xlsx')
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Apply min-max scaling:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
X1 = df1.columns[0:34]
X2 = df2.columns[0:103]
print(X2)
scaler = MinMaxScaler()
scaled_data1 = scaler.fit_transform(df1[X1])
scaled_data2 = scaler.fit_transform(df2[X2])
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# t-SNE
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tsne1 = TSNE(n_components=2, perplexity=40, learning_rate=70, n_iter=360)
tsne2 = TSNE(n_components=2, perplexity=40, learning_rate=70, n_iter=360)
X_tsne1 = tsne1.fit_transform(scaled_data1)
X_tsne2 = tsne2.fit_transform(scaled_data2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# MDS
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
mds1 = MDS(n_components=2, metric=False, eps=1e-3, n_init=1)
mds2 = MDS(n_components=2, metric=False, eps=1e-3, n_init=1)
X_MDS1 = mds1.fit_transform(scaled_data1)
X_MDS2 = mds2.fit_transform(scaled_data2)
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DBSCAN clustering method
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dbscan1 = DBSCAN(eps=0.13, min_samples=3)
dbscan2 = DBSCAN(eps=0.13, min_samples=2)
dbscan1.fit(scaled_data1)
dbscan2.fit(scaled_data2)
labelsD1 = dbscan1.labels_
labelsD2 = dbscan2.labels_
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DBSCAN number of clusters per eps for ZAP
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
score = []
for n in range(10, 300):
    dbscan1 = DBSCAN(eps=n/100, min_samples=3)
    dbscan1.fit(scaled_data1)
    score.append(max(dbscan1.labels_))
    print(n, max(dbscan1.labels_))
plt.plot(range(10, 300), score)
plt.xticks(range(10, 300))
plt.xlabel("Epsilon * 100")
plt.ylabel("Cluster Count")
plt.show()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DBSCAN number of clusters per eps for N-Stalker
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
score = []
for n in range(10, 300):
    dbscan2 = DBSCAN(eps=n/100, min_samples=3)
    dbscan2.fit(scaled_data2)
    score.append(max(dbscan2.labels_))
    print(n, max(dbscan2.labels_))
plt.plot(range(10, 300), score)
plt.xticks(range(10, 300))
plt.xlabel("Epsilon * 100")
plt.ylabel("Cluster Count")
plt.show()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Removing the outliers for Silhouette Score and C-H Index for DBSCAN
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
outlier_detection = DBSCAN(
  eps=0.13,
  metric="euclidean",
  min_samples=3,
  n_jobs=-1)
outliers1 = outlier_detection.fit_predict(scaled_data1)
outliers2 = outlier_detection.fit_predict(scaled_data2)
df_clean1 = scaled_data1[outliers1 != -1]
df_clean2 = scaled_data2[outliers2 != -1]
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Silhouette score without the outliers for DBSCAN
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreD1 = silhouette_score(df_clean1, outliers1[outliers1 != -1])
scoreD2 = silhouette_score(df_clean2, outliers2[outliers2 != -1])
print(f"Silhouette score: {scoreD1:.3f}")
print(f"Silhouette score: {scoreD2:.3f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calinski-Harabasz index without the outliers for DBSCAN
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreD1 = calinski_harabasz_score(df_clean1, outliers1[outliers1 != -1])
scoreD2 = calinski_harabasz_score(df_clean2, outliers2[outliers2 != -1])
print(f"Calinski-Harabasz index: {scoreD1:.3f}")
print(f"Calinski-Harabasz index: {scoreD2:.3f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Scatter plot of DBSCAN clusters
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
plt.scatter(X_tsne1[:, 0], X_tsne1[:, 1], c=labelsD1)
plt.xlabel("DBSCAN with t-SNE of ZAP scanner")
plt.show()
plt.scatter(X_tsne2[:, 0], X_tsne2[:, 1], c=labelsD2)
plt.xlabel("DBSCAN with t-SNE of N-Stalker scanner")
plt.show()
plt.scatter(X_MDS1[:, 0], X_MDS1[:, 1], c=labelsD1)
plt.xlabel("DBSCAN with MDS of ZAP scanner")
plt.show()
plt.scatter(X_MDS2[:, 0], X_MDS2[:, 1], c=labelsD2)
plt.xlabel("DBSCAN with MDS of N-Stalker scanner")
plt.show()
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# K-Means
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kmeans1 = KMeans(n_clusters=2)
kmeans2 = KMeans(n_clusters=2)
kmeans1.fit(scaled_data1)
kmeans2.fit(scaled_data2)
labelsK1 = kmeans1.labels_
labelsK2 = kmeans2.labels_
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Elbow Method
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
kmeans_kwargs = {
    "init": "random",
    "n_init": 10,
    "random_state": 1,
}
sse = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)
    kmeans.fit(scaled_data1)
    sse.append(kmeans.inertia_)
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters for ZAP")
plt.ylabel("SSE")
plt.show()

sse = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, **kmeans_kwargs)
    kmeans.fit(scaled_data2)
    sse.append(kmeans.inertia_)
plt.plot(range(1, 11), sse)
plt.xticks(range(1, 11))
plt.xlabel("Number of Clusters for ZAP")
plt.ylabel("SSE")
plt.show()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Silhouette score for K-Means
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreK1 = silhouette_score(scaled_data1, labelsK1)
scoreK2 = silhouette_score(scaled_data2, labelsK2)
print(f"Silhouette score: {scoreK1:.3f}")
print(f"Silhouette score: {scoreK2:.3f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calinski-Harabasz index for K-Means
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreK1 = calinski_harabasz_score(scaled_data1, labelsK1)
scoreK2 = calinski_harabasz_score(scaled_data2, labelsK2)
print(f"Calinski-Harabasz index: {scoreK1:.3f}")
print(f"Calinski-Harabasz index: {scoreK2:.3f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Scatter plot of K-Means clusters
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
plt.scatter(X_tsne1[:, 0], X_tsne1[:, 1], c=labelsK1)
plt.xlabel("K-Means with t-SNE of ZAP scanner")
plt.show()
plt.scatter(X_tsne2[:, 0], X_tsne2[:, 1], c=labelsK2)
plt.xlabel("K-Means with t-SNE of N-Stalker scanner")
plt.show()
plt.scatter(X_MDS1[:, 0], X_MDS1[:, 1], c=labelsK1)
plt.xlabel("K-Means with MDS of ZAP scanner")
plt.show()
plt.scatter(X_MDS2[:, 0], X_MDS2[:, 1], c=labelsK2)
plt.xlabel("K-Means with MDS of N-Stalker scanner")
plt.show()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Gaussian Mixture
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
gm1 = GaussianMixture(n_components=2)
gm2 = GaussianMixture(n_components=2)
gm1.fit(scaled_data1)
gm2.fit(scaled_data2)
labelsG1 = gm1.predict(scaled_data1)
labelsG2 = gm2.predict(scaled_data2)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# BIC & NIC
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
bic = []
for n in range(1, 10):
    gmm = mixture.GaussianMixture(n_components=n)
    gmm.fit(scaled_data1)
    bic.append(gmm.bic(scaled_data1))
aic = []
for n in range(1, 10):
    gmm = mixture.GaussianMixture(n_components=n)
    gmm.fit(scaled_data1)
    aic.append(gmm.aic(scaled_data1))
plt.plot(bic, label='BIC')
plt.plot(aic, label='AIC')
plt.legend()
plt.xlabel("n_components")
plt.show()

bic = []
for n in range(1, 10):
    gmm = mixture.GaussianMixture(n_components=n)
    gmm.fit(scaled_data2)
    bic.append(gmm.bic(scaled_data2))
aic = []
for n in range(1, 10):
    gmm = mixture.GaussianMixture(n_components=n)
    gmm.fit(scaled_data2)
    aic.append(gmm.aic(scaled_data2))
plt.plot(bic, label='BIC')
plt.plot(aic, label='AIC')
plt.legend()
plt.xlabel("n_components")
plt.show()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Silhouette score for Gaussian Mixture
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreG1 = silhouette_score(scaled_data1, labelsG1)
scoreG2 = silhouette_score(scaled_data2, labelsG2)
print(f"Silhouette score: {scoreG1:.3f}")
print(f"Silhouette score: {scoreG2:.3f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Calinski-Harabasz index for Gaussian Mixture
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
scoreG1 = calinski_harabasz_score(scaled_data1, labelsG1)
scoreG2 = calinski_harabasz_score(scaled_data2, labelsG2)
print(f"Calinski-Harabasz index: {scoreG1:.2f}")
print(f"Calinski-Harabasz index: {scoreG2:.2f}")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Scatter plot of Gaussian Mixture clusters
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
plt.scatter(X_tsne1[:, 0], X_tsne1[:, 1], c=labelsG1)
plt.xlabel("Gaussian Mixture with t-SNE of ZAP scanner")
plt.show()
plt.scatter(X_tsne2[:, 0], X_tsne2[:, 1], c=labelsG2)
plt.xlabel("Gaussian Mixture with t-SNE of N-Stalker scanner")
plt.show()
plt.scatter(X_MDS1[:, 0], X_MDS1[:, 1], c=labelsG1)
plt.xlabel("Gaussian Mixture with MDS of ZAP scanner")
plt.show()
plt.scatter(X_MDS2[:, 0], X_MDS2[:, 1], c=labelsG2)
plt.xlabel("Gaussian Mixture with MDS of N-Stalker scanner")
plt.show()
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create a new column in each dataframe to store the cluster predictions & Compare the cluster predictions for each row in the two dataframes
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df1['cluster'] = labelsD1
df2['cluster'] = labelsD2
differences = 0
for i in range(len(df1)):
    if df1.iloc[i]['cluster'] != df2.iloc[i]['cluster']:
        differences += 1
percent_different = differences / len(df1) * 100
print(f"{percent_different:.2f}% of the rows have different cluster predictions with DBSCAN clustering.")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df1['cluster'] = labelsK1
df2['cluster'] = labelsK2
differences = 0
for i in range(len(df1)):
    if df1.iloc[i]['cluster'] != df2.iloc[i]['cluster']:
        differences += 1
percent_different = differences / len(df1) * 100
print(f"{percent_different:.2f}% of the rows have different cluster predictions with K-Means clustering.")
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
df1['cluster'] = labelsG1
df2['cluster'] = labelsG2
differences = 0
for i in range(len(df1)):
    if df1.iloc[i]['cluster'] != df2.iloc[i]['cluster']:
        differences += 1
percent_different = differences / len(df1) * 100
print(f"{percent_different:.2f}% of the rows have different cluster predictions with Gaussian Mixture clustering.")
